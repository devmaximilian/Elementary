%{
    import json
    
    def lowercased(str):
        return str[0].lower() + str[1:]
    
    def valueOrNil(val):
        if val is None:
            return "nil"
        return val
    
    elements = {}
    with open('../../PeriodicTableJSON.json') as file:
        elements = json.load(file)['elements']
}%
extension Elements {
    /// - Returns: A custom element using the provided data.
    public static func custom(number: Int, period: Int, symbol: String, name: String, mass: Double, density: Double?, meltingPoint: Double?, boilingPoint: Double?, shells: [Int], phase: Element.Phase, category: Element.Category, position: (x: Int, y: Int), source: String) -> Element {
        return Element(number: number, period: period, symbol: symbol, name: name, mass: mass, density: density, meltingPoint: meltingPoint, boilingPoint: boilingPoint, shells: shells, phase: phase, category: category, position: position, source: source)
    }
% for element in elements:
    
    /// ${element['name']}
    public static var ${lowercased(element['name'])}: Element {
        return Element(
            number: ${element['number']},
            period: ${element['period']},
            symbol: "${element['symbol']}",
            name: "${element['name']}",
            mass: ${element['atomic_mass']},
            density: ${valueOrNil(element['density'])},
            meltingPoint: ${valueOrNil(element['melt'])},
            boilingPoint: ${valueOrNil(element['boil'])},
            shells: ${element['shells']},
            phase: Element.Phase(rawValue: "${lowercased(element['phase'])}").unsafelyUnwrapped,
            category: Element.Category("${element['category']}"),
            position: (${element['xpos']}, ${element['ypos']}),
            source: "${element['source']}"
        )
    }
% end
}

extension Elements {
    public static var allElements: [Element] {
        return [
            % for element in elements:
            ${lowercased(element['name'])},
            % end
        ]
    }
}
